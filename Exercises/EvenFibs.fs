(*
    Problem Statement: Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
                       By starting with 1 and 2, the first 10 terms will be:

                       1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

                       By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
                       find the sum of the even-valued terms.

    Problem #2 - Even Fibonacci Numbers
*)

(* 
    fibs: Fibonacci using memoization so we don't recalculate the same thing over and over. 
          Results are stored in 'memo' and retrieved from there.
*)
let fibs n = 
    let memo = Array.create(n+1) 0
    let rec fib x = 
        match x with 
        | 1 | 2 -> 1
        | x ->
            match memo.[x] with
            | 0 ->
                memo.[x] <- fib(x - 1) + fib (x - 2)
                memo.[x]
            | x -> x 
    fib(n)

let stopWatch = System.Diagnostics.Stopwatch.StartNew()
let solution = Seq.initInfinite (fun x -> fibs x)    // Generate a sequence of the fibonacci numbers
            |> Seq.skip(2)                           // Starting at the second number in the sequence
            |> Seq.takeWhile (fun i -> i < 4000000)  // Ending at the 4,000,000th number in the sequence
            |> Seq.filter (fun j -> j % 2 = 0)       // Only sum the even numbers
            |> Seq.sum
stopWatch.Stop()
printf "%f milliseconds elapsed\nSolution = %d\n" stopWatch.Elapsed.TotalMilliseconds solution